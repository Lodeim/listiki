{"ast":null,"code":"import { api } from \"../../api\";\nimport { getUpdatedPhotoForState, getPhotoFromState } from \"../../utils\";\nimport { getPhotosFailed, getPhotosStarted, getPhotosSuccess, mutatePhotoFailed, mutatePhotoStarted, mutatePhotoSuccess, setPhotosTotal } from \"../actionCreators/photos\";\nexport const getPhotos = function () {\n  let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  return async (dispatch, getState) => {\n    try {\n      const store = getState();\n      if (page === 1) {\n        dispatch(getPhotosStarted);\n      }\n      const response = await api.photos.getPhotos({\n        params: {\n          _page: page,\n          _limit: 5\n        }\n      });\n      if (page === 1) {\n        dispatch(setPhotosTotal(response.headers[\"x-total-count\"]));\n        dispatch(getPhotosSuccess([...response.data]));\n      } else {\n        dispatch(getPhotosSuccess([...store.photos.photos, ...response.data]));\n      }\n    } catch (error) {\n      dispatch(getPhotosFailed(error));\n    }\n  };\n};\nexport const toggleLike = (userId, photoId) => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    const newPhoto = getPhotoFromState(state.photos.photos, photoId);\n    if (newPhoto.likes.includes(userId)) {\n      newPhoto.likes = newPhoto.likes.filter(like => like !== userId);\n    } else {\n      newPhoto.likes.push(userId);\n    }\n    try {\n      const response = await api.photos.mutatePhoto({\n        data: newPhoto,\n        url: `/${photoId}`\n      });\n      const newPhotos = getUpdatedPhotoForState(state.photos.photos, photoId, response.data);\n      dispatch(getPhotosSuccess(newPhotos));\n    } catch (error) {\n      dispatch(mutatePhotoFailed(error));\n    }\n  };\n};\nexport const sendComment = (nickname, photoId, text) => {\n  return async (dispatch, getState) => {\n    dispatch(mutatePhotoStarted());\n    const state = getState();\n    const newPhoto = getPhotoFromState(state.photos.photos, photoId);\n    newPhoto.comments.push({\n      nickname,\n      text\n    });\n    try {\n      const response = await api.photos.mutatePhoto({\n        data: newPhoto,\n        url: `/${photoId}`\n      });\n      const newPhotos = getUpdatedPhotoForState(state.photos.photos, photoId, response.data);\n      dispatch(getPhotosSuccess(newPhotos));\n      dispatch(mutatePhotoSuccess());\n    } catch (error) {\n      dispatch(mutatePhotoFailed(error));\n    }\n  };\n};","map":{"version":3,"names":["api","getUpdatedPhotoForState","getPhotoFromState","getPhotosFailed","getPhotosStarted","getPhotosSuccess","mutatePhotoFailed","mutatePhotoStarted","mutatePhotoSuccess","setPhotosTotal","getPhotos","page","arguments","length","undefined","dispatch","getState","store","response","photos","params","_page","_limit","headers","data","error","toggleLike","userId","photoId","state","newPhoto","likes","includes","filter","like","push","mutatePhoto","url","newPhotos","sendComment","nickname","text","comments"],"sources":["/Users/lodeim/Documents/GitHub/listiki/src/redux/actions/photos.js"],"sourcesContent":["import { api } from \"../../api\";\nimport { getUpdatedPhotoForState, getPhotoFromState } from \"../../utils\";\nimport {\n  getPhotosFailed,\n  getPhotosStarted,\n  getPhotosSuccess,\n  mutatePhotoFailed,\n  mutatePhotoStarted,\n  mutatePhotoSuccess,\n  setPhotosTotal,\n} from \"../actionCreators/photos\";\n\nexport const getPhotos = (page = 1) => {\n  return async (dispatch, getState) => {\n    try {\n      const store = getState();\n      if (page === 1) {\n        dispatch(getPhotosStarted);\n      }\n      const response = await api.photos.getPhotos({\n        params: {\n          _page: page,\n          _limit: 5,\n        },\n      });\n\n      if (page === 1) {\n        dispatch(setPhotosTotal(response.headers[\"x-total-count\"]));\n        dispatch(getPhotosSuccess([...response.data]));\n      } else {\n        dispatch(getPhotosSuccess([...store.photos.photos, ...response.data]));\n      }\n    } catch (error) {\n      dispatch(getPhotosFailed(error));\n    }\n  };\n};\n\nexport const toggleLike = (userId, photoId) => {\n  return async (dispatch, getState) => {\n    const state = getState();\n\n    const newPhoto = getPhotoFromState(state.photos.photos, photoId);\n    if (newPhoto.likes.includes(userId)) {\n      newPhoto.likes = newPhoto.likes.filter((like) => like !== userId);\n    } else {\n      newPhoto.likes.push(userId);\n    }\n    try {\n      const response = await api.photos.mutatePhoto({\n        data: newPhoto,\n        url: `/${photoId}`,\n      });\n      const newPhotos = getUpdatedPhotoForState(\n        state.photos.photos,\n        photoId,\n        response.data\n      );\n      dispatch(getPhotosSuccess(newPhotos));\n    } catch (error) {\n      dispatch(mutatePhotoFailed(error));\n    }\n  };\n};\n\nexport const sendComment = (nickname, photoId, text) => {\n  return async (dispatch, getState) => {\n    dispatch(mutatePhotoStarted());\n    const state = getState();\n    const newPhoto = getPhotoFromState(state.photos.photos, photoId);\n    newPhoto.comments.push({ nickname, text });\n    try {\n      const response = await api.photos.mutatePhoto({\n        data: newPhoto,\n        url: `/${photoId}`,\n      });\n\n      const newPhotos = getUpdatedPhotoForState(\n        state.photos.photos,\n        photoId,\n        response.data\n      );\n      dispatch(getPhotosSuccess(newPhotos));\n      dispatch(mutatePhotoSuccess());\n    } catch (error) {\n      dispatch(mutatePhotoFailed(error));\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}