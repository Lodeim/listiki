{"ast":null,"code":"import { api } from \"../../api\";\nimport { getUserPagePostData } from \"../../utils\";\nimport { mutatePhotoFailed, mutatePhotoStarted, mutatePhotoSuccess } from \"../actionCreators/photos\";\nimport { getPostsFailed, getPostsStarted, getPostsSuccess } from \"../actionCreators/postsByUser\";\nexport const getPostsByUser = userId => {\n  return async dispatch => {\n    try {\n      dispatch(getPostsStarted());\n      const response = await api.postsByUser.getPostsByUser({\n        url: `/${userId}`\n      });\n      dispatch(getPostsSuccess(response.data.posts));\n    } catch (error) {\n      dispatch(getPostsFailed(error));\n    }\n  };\n};\nexport const toggleLikeOnPost = (userId, postId, postAuthorId) => {\n  return async (dispatch, getState) => {\n    try {\n      const posts = getState().postsByUser.posts;\n      const {\n        postForEdit,\n        newPosts\n      } = getUserPagePostData(posts, postId);\n      if (postForEdit.likes.includes(userId)) {\n        postForEdit.likes = postForEdit.likes.filter(like => like !== userId);\n      } else {\n        postForEdit.likes.push(userId);\n      }\n      await api.postsByUser.mutatePosts({\n        url: `/${postAuthorId}`,\n        data: {\n          id: postAuthorId,\n          posts: newPosts\n        }\n      });\n      dispatch(getPostsSuccess(newPosts));\n    } catch (error) {}\n  };\n};\nexport const sendCommentOnUserPage = (nickname, postId, postAuthorId, text) => {\n  return async (dispatch, getState) => {\n    dispatch(mutatePhotoStarted());\n    const posts = getState().postsByUser.posts;\n    const {\n      postForEdit,\n      newPosts\n    } = getUserPagePostData(posts, postId);\n    postForEdit.comments.push({\n      nickname,\n      text\n    });\n    try {\n      const response = await api.postsByUser.mutatePosts({\n        url: `/${postAuthorId}`,\n        data: {\n          id: postAuthorId,\n          posts: newPosts\n        }\n      });\n      dispatch(getPostsSuccess(response.data.posts));\n      dispatch(mutatePhotoSuccess());\n    } catch (error) {\n      dispatch(mutatePhotoFailed(error));\n    }\n  };\n};","map":{"version":3,"names":["api","getUserPagePostData","mutatePhotoFailed","mutatePhotoStarted","mutatePhotoSuccess","getPostsFailed","getPostsStarted","getPostsSuccess","getPostsByUser","userId","dispatch","response","postsByUser","url","data","posts","error","toggleLikeOnPost","postId","postAuthorId","getState","postForEdit","newPosts","likes","includes","filter","like","push","mutatePosts","id","sendCommentOnUserPage","nickname","text","comments"],"sources":["/Users/lodeim/Documents/GitHub/listiki/src/redux/actions/postsByUser.js"],"sourcesContent":["import { api } from \"../../api\";\nimport { getUserPagePostData } from \"../../utils\";\nimport {\n  mutatePhotoFailed,\n  mutatePhotoStarted,\n  mutatePhotoSuccess,\n} from \"../actionCreators/photos\";\nimport {\n  getPostsFailed,\n  getPostsStarted,\n  getPostsSuccess,\n} from \"../actionCreators/postsByUser\";\n\nexport const getPostsByUser = (userId) => {\n  return async (dispatch) => {\n    try {\n      dispatch(getPostsStarted());\n      const response = await api.postsByUser.getPostsByUser({\n        url: `/${userId}`,\n      });\n\n      dispatch(getPostsSuccess(response.data.posts));\n    } catch (error) {\n      dispatch(getPostsFailed(error));\n    }\n  };\n};\n\nexport const toggleLikeOnPost = (userId, postId, postAuthorId) => {\n  return async (dispatch, getState) => {\n    try {\n      const posts = getState().postsByUser.posts;\n      const { postForEdit, newPosts } = getUserPagePostData(posts, postId);\n\n      if (postForEdit.likes.includes(userId)) {\n        postForEdit.likes = postForEdit.likes.filter((like) => like !== userId);\n      } else {\n        postForEdit.likes.push(userId);\n      }\n\n      await api.postsByUser.mutatePosts({\n        url: `/${postAuthorId}`,\n        data: {\n          id: postAuthorId,\n          posts: newPosts,\n        },\n      });\n\n      dispatch(getPostsSuccess(newPosts));\n    } catch (error) {}\n  };\n};\n\nexport const sendCommentOnUserPage = (nickname, postId, postAuthorId, text) => {\n  return async (dispatch, getState) => {\n    dispatch(mutatePhotoStarted());\n    const posts = getState().postsByUser.posts;\n    const { postForEdit, newPosts } = getUserPagePostData(posts, postId);\n\n    postForEdit.comments.push({ nickname, text });\n    try {\n      const response = await api.postsByUser.mutatePosts({\n        url: `/${postAuthorId}`,\n        data: {\n          id: postAuthorId,\n          posts: newPosts,\n        },\n      });\n\n      dispatch(getPostsSuccess(response.data.posts));\n      dispatch(mutatePhotoSuccess());\n    } catch (error) {\n      dispatch(mutatePhotoFailed(error));\n    }\n  };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}